{"version":3,"sources":["components/Stock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","name","className","App","props","state","c","h","l","o","s","t","v","stockName","this","data","index","map","item","width","height","type","dataKey","stroke","strokeDasharray","generateChart","setState","url","console","log","fetch","then","response","json","storeCandleData","catch","err","getStockCandle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAaeA,EAXD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACd,OACE,6BACE,gCAAQ,2CACR,yBAAKC,UAAU,qBACb,wBAAIA,UAAU,QAAd,WAA8BD,M,IC4EvBE,E,YA5Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,UAAW,MAVI,E,sEAejB,OACE,yBAAKX,UAAU,eACb,kBAAC,EAAD,CAAOD,KAAMa,KAAKT,MAAMQ,YAnChC,SAAuBE,GACrB,IAAIC,EAAQ,EAKZ,OAJAD,EAAOA,EAAKE,KAAI,SAAAC,GAEd,MAAO,CAAC,QADRF,EACuB,MAAQE,MAG/B,kBAAC,IAAD,CAAWC,MAAO,IAAKC,OAAQ,IAAKL,KAAMA,GACxC,kBAAC,IAAD,CAAMM,KAAK,WAAWC,QAAQ,QAAQC,OAAO,YAC7C,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOF,QAAQ,UACf,kBAAC,IAAD,CAAOA,QAAQ,UACf,kBAAC,IAAD,OAwBGG,CAAcX,KAAKT,MAAMC,M,sCAKhBS,EAAMd,GAEpBa,KAAKY,SAAS,CACZpB,EAAES,EAAKT,EACPC,EAAEQ,EAAKR,EACPC,EAAEO,EAAKP,EACPC,EAAEM,EAAKN,EACPC,EAAEK,EAAKL,EACPC,EAAEI,EAAKJ,EACPC,EAAEG,EAAKH,EACPC,UAAUZ,M,uCAKb,IAAD,OADeA,EACf,uDADoB,OAEd0B,EAAM,qFAAsF1B,EAAO,gBACvG2B,QAAQC,IAAIF,GACZG,MAAMH,EAAK,CACT,OAAU,MACV,QAAW,CACT,kBAAmB,8CACnB,iBAAkB,wDAGrBI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAI,OAAI,EAAKmB,gBAAgBnB,EAAMd,MACxCkC,OAAM,SAAAC,GACLR,QAAQC,IAAIO,Q,0CAKdtB,KAAKuB,eAAe,Y,GAzDNC,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.dea1d576.chunk.js","sourcesContent":["import React from 'react'\n\nconst Stock = ({name}) => {\n  return (\n    <div>\n      <center><h1>Stock View</h1></center>\n      <div className=\"stock-information\">\n        <h2 className=\"name\">TICKER: {name}</h2>\n      </div>\n    </div>\n  )\n};\n\nexport default Stock\n","import React from 'react';\nimport './App.css';\nimport { LineChart, Line, CartesianGrid, Tooltip, XAxis, YAxis } from 'recharts'\nimport Stock from './components/Stock'\n\nfunction generateChart(data) {\n  var index = 0;\n  data = data.map(item => {\n    index++;\n    return {\"index\":index, \"value\":item};\n  });\n  return (\n    <LineChart width={600} height={300} data={data}>\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n      <CartesianGrid strokeDasharray=\"3 3\"/>\n      <XAxis dataKey=\"index\"/>\n      <YAxis dataKey=\"value\"/>\n      <Tooltip/>\n    </LineChart>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      c: [],\n      h: [],\n      l: [],\n      o: [],\n      s: [],\n      t: [],\n      v: [],\n      stockName: null,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Information\">\n        <Stock name={this.state.stockName}/>\n        {generateChart(this.state.c)}\n      </div>\n    )\n  }\n\n  storeCandleData(data, name)\n  {\n    this.setState({\n      c:data.c,\n      h:data.h,\n      l:data.l,\n      o:data.o,\n      s:data.s,\n      t:data.t,\n      v:data.v,\n      stockName:name,\n    });\n  }\n\n  getStockCandle(name=\"AAPL\")\n  {\n    let url = 'https://finnhub-realtime-stock-price.p.rapidapi.com/stock/candle?count=200&symbol=' +name + \"&resolution=D\";\n    console.log(url);\n    fetch(url, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"finnhub-realtime-stock-price.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"bfc0641820msh0bbab8db87079ebp145b2djsnc142f2e17a4d\"\n      }\n    })\n    .then(response => response.json())\n    .then(data => this.storeCandleData(data, name))\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount(){\n    this.getStockCandle(\"AAPL\");\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}