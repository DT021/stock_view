{"version":3,"sources":["components/Chart.js","components/Search.js","components/StockCard.js","components/StockView.js","components/WatchlistView.js","components/MarketView.js","App.js","serviceWorker.js","index.js"],"names":["StockToolTip","active","payload","label","className","time","close","high","low","open","volume","Chart","data","width","height","margin","top","left","right","bottom","strokeDashArray","dataKey","tickCount","type","domain","content","stroke","dot","processSearchData","stock_ticker","company_name","res","filePath","result","xmlhttp","XMLHttpRequest","send","status","responseText","loadFile","split","add","ret","i","length","indexOf","substr","push","key","value","Search","props","placeholder","autoFocus","dropDownBorderColor","onSelect","f","StockCard","console","log","stockName","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","getMonth","getDate","generateData","finData","c","h","l","o","t","v","StockView","state","resolution","isDataLoaded","base_url","candle_endpoint","handleClick","bind","record","this","getStockCandle","Row","Col","sm","style","position","name","setState","count","url","getCandleUrl","fetch","then","response","json","storeCandleData","catch","err","React","Component","WatchlistView","MarketView","App","Container","fluid","Navbar","bg","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","FormControl","Button","variant","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02a23cc9.chunk.js","sourcesContent":["import React from 'react'\nimport { LineChart, Line, ResponsiveContainer, CartesianGrid, Tooltip, XAxis, YAxis, Legend} from 'recharts'\n\n\nconst StockToolTip = ({ active, payload, label }) => {\n  if (active) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p>{`date  : ${payload[0].payload.time}`}</p>\n        <p>{`close : $${payload[0].payload.close}`}</p>\n        <p>{`high  : $${payload[0].payload.high}`}</p>\n        <p>{`low   : $${payload[0].payload.low}`}</p>\n        <p>{`open  : $${payload[0].payload.open}`}</p>\n        <p>{`volume: ${payload[0].payload.volume}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst Chart = ({data}) => {\n\n  if (data)\n  {\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart\n            width=\"100%\"\n            height=\"100%\"\n            data={data}\n            margin={{ top: 20, left: 20, right:20, bottom: 20}}\n          >\n            <CartesianGrid strokeDashArray=\"3 3\" />\n            <XAxis\n              dataKey=\"time\"\n              tickCount={5}\n            >\n        </XAxis>\n            <YAxis\n              type=\"number\"\n              domain={['auto', 'auto']}\n            />\n            <Tooltip content={<StockToolTip />}/>\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"close\" stroke=\"#8884d8\" dot={false}/>\n            <Line type=\"monotone\" dataKey=\"high\" stroke=\"#34e5eb\" dot={false}/>\n            <Line type=\"monotone\" dataKey=\"low\" stroke=\"#eb34a8\" dot={false}/>\n            <Line type=\"monotone\" dataKey=\"open\" stroke=\"#59eb34\" dot={false}/>\n          </LineChart>\n        </ResponsiveContainer>\n    )\n  }\n  else\n  {\n    return (\n        <ResponsiveContainer width={700} height=\"80%\">\n          <LineChart width=\"100%\" height=\"100%\" data={data}>\n            <CartesianGrid strokeDashArray=\"3 3\" />\n            <XAxis dataKey=\"time\" tickCount={5}/>\n            <YAxis type=\"number\" domain={['auto', 'auto']} />\n            <Tooltip />\n            <Legend />\n          </LineChart>\n        </ResponsiveContainer>\n    )\n  }\n};\n\nexport default Chart\n","import React from 'react';\nimport ReactSearchBox from 'react-search-box'\n\nfunction loadFile(filePath) {\n  var result = null;\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.open(\"GET\", filePath, false);\n  xmlhttp.send();\n  if (xmlhttp.status===200) {\n    result = xmlhttp.responseText;\n  }\n  return result;\n}\n\nfunction  processSearchData() {\n  var data = loadFile('https://raw.githubusercontent.com/benjaminykim/stock_view/master/public/stock_listed.txt');\n  var res = data.split('\\n');\n  var stock_ticker;\n  var company_name;\n  var add = [];\n  var ret = [];\n  for (var i=1; i < res.length; i++)\n  {\n    add = res[i].split('|');\n    stock_ticker = add[0];\n    company_name = add[1];\n    if (company_name && company_name.indexOf('-') !== -1) {\n      company_name = company_name.substr(0, company_name.indexOf('-') - 1);\n    }\n    ret.push({\n      key:stock_ticker,\n      value:company_name\n    });\n  }\n  return (ret);\n}\n\nfunction Search(props) {\n  var data = processSearchData();\n  return (\n    <ReactSearchBox\n            placeholder=\"\"\n            value=\"TWTR\"\n            autoFocus={true}\n            dropDownBorderColor={\"#ffffff\"}\n            data={data}\n            onSelect={props.f}\n    />\n  )\n}\n\nexport default Search;\n","import React from 'react';\n\nconst StockCard = (props) => {\n  console.log(props);\n  console.log(props.stockName);\n  console.log(props);\n  return (\n      <div>\n        <p>Stock: {props.data.stockName}</p>\n      </div>\n  );\n};\n\nexport default StockCard;\n","import React from 'react';\nimport Chart from './Chart'\nimport Search from './Search'\nimport StockCard from './StockCard'\nimport { Row, Col} from 'react-bootstrap'\n\nfunction timeConverter(UNIX_timestamp){\n  var a = new Date(UNIX_timestamp * 1000);\n  var year = a.getFullYear() % 100;\n  var month = a.getMonth() + 1;\n  var date = a.getDate();\n  var time = month + '/' + date + '/' + year;\n  return time;\n}\n\nfunction generateData(finData) {\n  var data = [];\n  for (var i=0; i < finData.c.length; i++)\n  {\n    data.push({\n      'close': finData.c[i],\n      'high': finData.h[i],\n      'low': finData.l[i],\n      'open': finData.o[i],\n      'time': timeConverter(finData.t[i]),\n      'volume': finData.v[i]\n    });\n  }\n  return (data);\n}\n\nclass StockView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: null,\n      stockName: null,\n      resolution: null,\n      isDataLoaded: false,\n    }\n    this.base_url = 'https://finnhub.io/api/v1'\n    this.candle_endpoint = '/stock/candle?'\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(record) {\n    console.log(record);\n    this.getStockCandle(record.key);\n  }\n\n  render() {\n    return (\n      <Row>\n        <Col sm={8}>\n          <div style={{height:\"800px\", width:\"100%\"}}>\n          <Chart data={this.state.data}/>\n          </div>\n        </Col>\n        <Col sm={4}>\n          <div style={{position:\"absolute\", top:\"19px\", width:\"80%\"}}>\n          <Search f={this.handleClick}/>\n          <StockCard data={this.state}/>\n          </div>\n        </Col>\n      </Row>\n    )\n  }\n\n  storeCandleData(data, name, resolution)\n  {\n    this.setState({\n      data:generateData(data),\n      stockName:name,\n      resolution:resolution,\n      isDataLoaded:true,\n    });\n  }\n\n  getCandleUrl(name, count, resolution)\n  {\n    var url = this.base_url + this.candle_endpoint + \"symbol=\" + name + \"&resolution=\" + resolution +  \"&count=\" + count + \"&token=boamq6vrh5rbii6a3j30\"\n    return (url);\n  }\n\n  getStockCandle(name=\"AAPL\", count=200, resolution=\"D\")\n  {\n    var url = this.getCandleUrl(name, count, resolution);\n    console.log(url);\n    fetch(url, {\n      \"method\": \"GET\",\n    })\n    .then(response => response.json())\n    .then(data => this.storeCandleData(data, name, resolution))\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount(){\n    this.getStockCandle(\"TWTR\", 200, \"D\");\n  }\n}\n\nexport default StockView;\n","import React from 'react';\n\nexport default class WatchlistView extends React.Component {\n    render() {\n        return (\n            <div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class MarketView extends React.Component {\n    render() {\n        return (\n            <div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from 'react-bootstrap/Container';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport './App.css';\nimport StockView from './components/StockView'\nimport WatchlistView from './components/WatchlistView'\nimport MarketView from './components/MarketView'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div  className=\"stock-information\" >\n        <Router>\n        <Container fluid=\"true\">\n          <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\n            <Navbar.Brand href=\"/\">stock_view</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/\">Home</Nav.Link>\n                <Nav.Link href=\"/watchlist\">Watchlist</Nav.Link>\n                <Nav.Link href=\"/markets\">Markets</Nav.Link>\n              </Nav>\n              <Form inline>\n                <FormControl type=\"text\" placeholder=\"AAPL\" className=\"mr-sm-2\" />\n                <Button variant=\"outline-success\">Search</Button>\n              </Form>\n            </Navbar.Collapse>\n          </Navbar>\n          <br/>\n          <Route path=\"/\" exact component={StockView} />\n          <Route path=\"/watchlist\" component={WatchlistView} />\n          <Route path=\"/markets\" component={MarketView} />\n        </Container>\n      </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}