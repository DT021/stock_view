{"version":3,"sources":["components/Stock.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Stock","name","className","StockToolTip","active","payload","label","time","close","high","low","open","volume","Chart","data","width","height","margin","top","left","right","bottom","strokeDashArray","dataKey","tickCount","type","domain","content","stroke","dot","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","getMonth","getDate","generateData","finData","i","c","length","push","h","l","o","t","v","App","props","state","stockName","resolution","isDataLoaded","style","paddingBottom","position","this","setState","count","url","console","log","fetch","then","response","json","storeCandleData","catch","err","getStockCandle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b941cf57.chunk.js","sourcesContent":["import React from 'react'\n\nconst Stock = ({name}) => {\n  return (\n    <div>\n      <center><h1>Stock View</h1></center>\n      <div  className=\"stock-information\">\n        <h2 className=\"name\">TICKER: {name}</h2>\n      </div>\n    </div>\n  )\n};\n\nexport default Stock\n","import React from 'react'\nimport { Label, LineChart, Line, ResponsiveContainer, CartesianGrid, Tooltip, XAxis, YAxis, Legend} from 'recharts'\n\n\nconst StockToolTip = ({ active, payload, label }) => {\n  if (active) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p>{`date  : ${payload[0].payload.time}`}</p>\n        <p>{`close : $${payload[0].payload.close}`}</p>\n        <p>{`high  : $${payload[0].payload.high}`}</p>\n        <p>{`low   : $${payload[0].payload.low}`}</p>\n        <p>{`open  : $${payload[0].payload.open}`}</p>\n        <p>{`volume: ${payload[0].payload.volume}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst Chart = ({data}) => {\n\n  if (data)\n  {\n    return (\n      <ResponsiveContainer width={700} height=\"80%\">\n        <LineChart\n          width=\"100%\"\n          height=\"100%\"\n          data={data}\n          margin={{ top: 20, left: 20, right:20, bottom: 20}}\n        >\n          <CartesianGrid strokeDashArray=\"3 3\" />\n          <XAxis\n            dataKey=\"time\"\n            tickCount={5}\n          >\n      </XAxis>\n          <YAxis\n            type=\"number\"\n            domain={['auto', 'auto']}\n          />\n          <Tooltip content={<StockToolTip />}/>\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"close\" stroke=\"#8884d8\" dot={false}/>\n          <Line type=\"monotone\" dataKey=\"high\" stroke=\"#34e5eb\" dot={false}/>\n          <Line type=\"monotone\" dataKey=\"low\" stroke=\"#eb34a8\" dot={false}/>\n          <Line type=\"monotone\" dataKey=\"open\" stroke=\"#59eb34\" dot={false}/>\n        </LineChart>\n      </ResponsiveContainer>\n    )\n  }\n  else\n  {\n    return (\n      <ResponsiveContainer width={700} height=\"80%\">\n        <LineChart width=\"100%\" height=\"100%\" data={data}>\n          <CartesianGrid strokeDashArray=\"3 3\" />\n          <XAxis dataKey=\"time\" tickCount={5}/>\n          <YAxis type=\"number\" domain={['auto', 'auto']} />\n          <Tooltip />\n          <Legend />\n        </LineChart>\n      </ResponsiveContainer>\n    )\n  }\n};\n\nexport default Chart\n","import React from 'react';\nimport './App.css';\nimport Stock from './components/Stock'\nimport Chart from './components/Chart'\n\nfunction timeConverter(UNIX_timestamp){\n  var a = new Date(UNIX_timestamp * 1000);\n  var year = a.getFullYear() % 100;\n  var month = a.getMonth() + 1;\n  var date = a.getDate();\n  var time = month + '/' + date + '/' + year;\n  return time;\n}\n\nfunction generateData(finData) {\n  var data = [];\n  for (var i=0; i < finData.c.length; i++)\n  {\n    data.push({\n      'close': finData.c[i],\n      'high': finData.h[i],\n      'low': finData.l[i],\n      'open': finData.o[i],\n      'time': timeConverter(finData.t[i]),\n      'volume': finData.v[i]\n    });\n  }\n  return (data);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: null,\n      stockName: null,\n      resolution: null,\n      isDataLoaded: false,\n    }\n  }\n\n  render() {\n    return (\n      <div  className=\"stock-information\"\n            style={{\n              paddingBottom: '50%',\n              position:'relative',\n              height:0\n            }}>\n        <div  className=\"stock-title\"\n              style={{\n                position:'relative',\n                top:'0',\n                left:'100px',\n                width:'100%',\n                height:'50px',\n              }}>\n          <Stock name={this.state.stockName}/>\n        </div>\n        <div  className=\"stock-chart\"\n              style={{\n                position:'absolute',\n                top:'150px',\n                left:'0',\n                width:'100%',\n                height:'100%'\n              }}>\n          <Chart data={this.state.data}/>\n        </div>\n      </div>\n    )\n  }\n\n  storeCandleData(data, name, resolution)\n  {\n    this.setState({\n      data:generateData(data),\n      stockName:name,\n      resolution:resolution,\n      isDataLoaded:true,\n    });\n  }\n\n  getStockCandle(name=\"AAPL\", count=200, resolution=\"D\")\n  {\n    let url = 'https://finnhub-realtime-stock-price.p.rapidapi.com/stock/candle?count=' + count + '&symbol=' +name + '&resolution=' + resolution;\n    console.log(url);\n    fetch(url, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"finnhub-realtime-stock-price.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"bfc0641820msh0bbab8db87079ebp145b2djsnc142f2e17a4d\"\n      }\n    })\n    .then(response => response.json())\n    .then(data => this.storeCandleData(data, name, resolution))\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount(){\n    this.getStockCandle(\"AAPL\");\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}